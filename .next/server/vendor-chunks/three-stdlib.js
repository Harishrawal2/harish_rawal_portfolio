"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-stdlib";
exports.ids = ["vendor-chunks/three-stdlib"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-stdlib/_polyfill/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/three-stdlib/_polyfill/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst version = /* @__PURE__ */ (()=>parseInt(three__WEBPACK_IMPORTED_MODULE_0__.REVISION.replace(/\\D+/g, \"\")))();\n //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL19wb2x5ZmlsbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUM7QUFDakMsTUFBTUMsVUFBMEIsYUFBSCxHQUFJLEtBQU1DLFNBQVNGLDJDQUFRQSxDQUFDRyxPQUFPLENBQUMsUUFBUSxJQUFHO0FBRzFFLENBQ0YscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29mdHdhcmUtZW5naW5lZXItcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3RocmVlLXN0ZGxpYi9fcG9seWZpbGwvY29uc3RhbnRzLmpzP2YxN2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUkVWSVNJT04gfSBmcm9tIFwidGhyZWVcIjtcbmNvbnN0IHZlcnNpb24gPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHBhcnNlSW50KFJFVklTSU9OLnJlcGxhY2UoL1xcRCsvZywgXCJcIikpKSgpO1xuZXhwb3J0IHtcbiAgdmVyc2lvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSRVZJU0lPTiIsInZlcnNpb24iLCJwYXJzZUludCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/_polyfill/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/_polyfill/uv1.js":
/*!****************************************************!*\
  !*** ./node_modules/three-stdlib/_polyfill/uv1.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UV1: () => (/* binding */ UV1)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/three-stdlib/_polyfill/constants.js\");\n\nconst UV1 = _constants_js__WEBPACK_IMPORTED_MODULE_0__.version >= 125 ? \"uv1\" : \"uv2\";\n //# sourceMappingURL=uv1.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL19wb2x5ZmlsbC91djEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDekMsTUFBTUMsTUFBTUQsa0RBQU9BLElBQUksTUFBTSxRQUFRO0FBR25DLENBQ0YsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc29mdHdhcmUtZW5naW5lZXItcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3RocmVlLXN0ZGxpYi9fcG9seWZpbGwvdXYxLmpzP2JhNmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL2NvbnN0YW50cy5qc1wiO1xuY29uc3QgVVYxID0gdmVyc2lvbiA+PSAxMjUgPyBcInV2MVwiIDogXCJ1djJcIjtcbmV4cG9ydCB7XG4gIFVWMVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV2MS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2ZXJzaW9uIiwiVVYxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/_polyfill/uv1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/controls/EventDispatcher.js":
/*!***************************************************************!*\
  !*** ./node_modules/three-stdlib/controls/EventDispatcher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventDispatcher: () => (/* binding */ EventDispatcher)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nclass EventDispatcher {\n    constructor(){\n        // not defined in @types/three\n        __publicField(this, \"_listeners\");\n    }\n    /**\n   * Adds a listener to an event type.\n   * @param type The type of event to listen to.\n   * @param listener The function that gets called when the event is fired.\n   */ addEventListener(type, listener) {\n        if (this._listeners === void 0) this._listeners = {};\n        const listeners = this._listeners;\n        if (listeners[type] === void 0) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n    }\n    /**\n      * Checks if listener is added to an event type.\n      * @param type The type of event to listen to.\n      * @param listener The function that gets called when the event is fired.\n      */ hasEventListener(type, listener) {\n        if (this._listeners === void 0) return false;\n        const listeners = this._listeners;\n        return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;\n    }\n    /**\n      * Removes a listener from an event type.\n      * @param type The type of the listener that gets removed.\n      * @param listener The listener function that gets removed.\n      */ removeEventListener(type, listener) {\n        if (this._listeners === void 0) return;\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== void 0) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1) {\n                listenerArray.splice(index, 1);\n            }\n        }\n    }\n    /**\n      * Fire an event type.\n      * @param event The event that gets fired.\n      */ dispatchEvent(event) {\n        if (this._listeners === void 0) return;\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== void 0) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for(let i = 0, l = array.length; i < l; i++){\n                array[i].call(this, event);\n            }\n            event.target = null;\n        }\n    }\n}\n //# sourceMappingURL=EventDispatcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2NvbnRyb2xzL0V2ZW50RGlzcGF0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0M7SUFDN0JILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7SUFDL0QsT0FBT0E7QUFDVDtBQUNBLE1BQU1LO0lBQ0pDLGFBQWM7UUFDWiw4QkFBOEI7UUFDOUJGLGNBQWMsSUFBSSxFQUFFO0lBQ3RCO0lBQ0E7Ozs7R0FJQyxHQUNERyxpQkFBaUJDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQy9CLElBQUksSUFBSSxDQUFDQyxVQUFVLEtBQUssS0FBSyxHQUMzQixJQUFJLENBQUNBLFVBQVUsR0FBRyxDQUFDO1FBQ3JCLE1BQU1DLFlBQVksSUFBSSxDQUFDRCxVQUFVO1FBQ2pDLElBQUlDLFNBQVMsQ0FBQ0gsS0FBSyxLQUFLLEtBQUssR0FBRztZQUM5QkcsU0FBUyxDQUFDSCxLQUFLLEdBQUcsRUFBRTtRQUN0QjtRQUNBLElBQUlHLFNBQVMsQ0FBQ0gsS0FBSyxDQUFDSSxPQUFPLENBQUNILGNBQWMsQ0FBQyxHQUFHO1lBQzVDRSxTQUFTLENBQUNILEtBQUssQ0FBQ0ssSUFBSSxDQUFDSjtRQUN2QjtJQUNGO0lBQ0E7Ozs7TUFJSSxHQUNKSyxpQkFBaUJOLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQy9CLElBQUksSUFBSSxDQUFDQyxVQUFVLEtBQUssS0FBSyxHQUMzQixPQUFPO1FBQ1QsTUFBTUMsWUFBWSxJQUFJLENBQUNELFVBQVU7UUFDakMsT0FBT0MsU0FBUyxDQUFDSCxLQUFLLEtBQUssS0FBSyxLQUFLRyxTQUFTLENBQUNILEtBQUssQ0FBQ0ksT0FBTyxDQUFDSCxjQUFjLENBQUM7SUFDOUU7SUFDQTs7OztNQUlJLEdBQ0pNLG9CQUFvQlAsSUFBSSxFQUFFQyxRQUFRLEVBQUU7UUFDbEMsSUFBSSxJQUFJLENBQUNDLFVBQVUsS0FBSyxLQUFLLEdBQzNCO1FBQ0YsTUFBTUMsWUFBWSxJQUFJLENBQUNELFVBQVU7UUFDakMsTUFBTU0sZ0JBQWdCTCxTQUFTLENBQUNILEtBQUs7UUFDckMsSUFBSVEsa0JBQWtCLEtBQUssR0FBRztZQUM1QixNQUFNQyxRQUFRRCxjQUFjSixPQUFPLENBQUNIO1lBQ3BDLElBQUlRLFVBQVUsQ0FBQyxHQUFHO2dCQUNoQkQsY0FBY0UsTUFBTSxDQUFDRCxPQUFPO1lBQzlCO1FBQ0Y7SUFDRjtJQUNBOzs7TUFHSSxHQUNKRSxjQUFjQyxLQUFLLEVBQUU7UUFDbkIsSUFBSSxJQUFJLENBQUNWLFVBQVUsS0FBSyxLQUFLLEdBQzNCO1FBQ0YsTUFBTUMsWUFBWSxJQUFJLENBQUNELFVBQVU7UUFDakMsTUFBTU0sZ0JBQWdCTCxTQUFTLENBQUNTLE1BQU1aLElBQUksQ0FBQztRQUMzQyxJQUFJUSxrQkFBa0IsS0FBSyxHQUFHO1lBQzVCSSxNQUFNQyxNQUFNLEdBQUcsSUFBSTtZQUNuQixNQUFNQyxRQUFRTixjQUFjTyxLQUFLLENBQUM7WUFDbEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLElBQUlILE1BQU1JLE1BQU0sRUFBRUYsSUFBSUMsR0FBR0QsSUFBSztnQkFDNUNGLEtBQUssQ0FBQ0UsRUFBRSxDQUFDRyxJQUFJLENBQUMsSUFBSSxFQUFFUDtZQUN0QjtZQUNBQSxNQUFNQyxNQUFNLEdBQUc7UUFDakI7SUFDRjtBQUNGO0FBR0UsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2Z0d2FyZS1lbmdpbmVlci1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2NvbnRyb2xzL0V2ZW50RGlzcGF0Y2hlci5qcz85NDQyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmNsYXNzIEV2ZW50RGlzcGF0Y2hlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIG5vdCBkZWZpbmVkIGluIEB0eXBlcy90aHJlZVxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfbGlzdGVuZXJzXCIpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdG8gYW4gZXZlbnQgdHlwZS5cbiAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWQuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdm9pZCAwKVxuICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0gPT09IHZvaWQgMCkge1xuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcikgPT09IC0xKSB7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgICAgKiBDaGVja3MgaWYgbGlzdGVuZXIgaXMgYWRkZWQgdG8gYW4gZXZlbnQgdHlwZS5cbiAgICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIHRvLlxuICAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgZmlyZWQuXG4gICAgICAqL1xuICBoYXNFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICByZXR1cm4gbGlzdGVuZXJzW3R5cGVdICE9PSB2b2lkIDAgJiYgbGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpICE9PSAtMTtcbiAgfVxuICAvKipcbiAgICAgICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZyb20gYW4gZXZlbnQgdHlwZS5cbiAgICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIGxpc3RlbmVyIHRoYXQgZ2V0cyByZW1vdmVkLlxuICAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRoYXQgZ2V0cyByZW1vdmVkLlxuICAgICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMgPT09IHZvaWQgMClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgY29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1t0eXBlXTtcbiAgICBpZiAobGlzdGVuZXJBcnJheSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGxpc3RlbmVyQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAgICAqIEZpcmUgYW4gZXZlbnQgdHlwZS5cbiAgICAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0aGF0IGdldHMgZmlyZWQuXG4gICAgICAqL1xuICBkaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICBjb25zdCBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChsaXN0ZW5lckFycmF5ICE9PSB2b2lkIDApIHtcbiAgICAgIGV2ZW50LnRhcmdldCA9IHRoaXM7XG4gICAgICBjb25zdCBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoMCk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBhcnJheVtpXS5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5leHBvcnQge1xuICBFdmVudERpc3BhdGNoZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudERpc3BhdGNoZXIuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJFdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJpbmRleCIsInNwbGljZSIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsInRhcmdldCIsImFycmF5Iiwic2xpY2UiLCJpIiwibCIsImxlbmd0aCIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/controls/EventDispatcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js":
/*!*************************************************************!*\
  !*** ./node_modules/three-stdlib/controls/OrbitControls.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapControls: () => (/* binding */ MapControls),\n/* harmony export */   OrbitControls: () => (/* binding */ OrbitControls)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher.js */ \"(ssr)/./node_modules/three-stdlib/controls/EventDispatcher.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n\n\nconst _ray = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst _plane = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\nconst TILT_LIMIT = Math.cos(70 * (Math.PI / 180));\nconst moduloWrapAround = (offset, capacity)=>(offset % capacity + capacity) % capacity;\nclass OrbitControls extends _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {\n    constructor(object, domElement){\n        super();\n        __publicField(this, \"object\");\n        __publicField(this, \"domElement\");\n        // Set to false to disable this control\n        __publicField(this, \"enabled\", true);\n        // \"target\" sets the location of focus, where the object orbits around\n        __publicField(this, \"target\", new three__WEBPACK_IMPORTED_MODULE_0__.Vector3());\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        __publicField(this, \"minDistance\", 0);\n        __publicField(this, \"maxDistance\", Infinity);\n        // How far you can zoom in and out ( OrthographicCamera only )\n        __publicField(this, \"minZoom\", 0);\n        __publicField(this, \"maxZoom\", Infinity);\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        __publicField(this, \"minPolarAngle\", 0);\n        // radians\n        __publicField(this, \"maxPolarAngle\", Math.PI);\n        // radians\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n        __publicField(this, \"minAzimuthAngle\", -Infinity);\n        // radians\n        __publicField(this, \"maxAzimuthAngle\", Infinity);\n        // radians\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        __publicField(this, \"enableDamping\", false);\n        __publicField(this, \"dampingFactor\", 0.05);\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        __publicField(this, \"enableZoom\", true);\n        __publicField(this, \"zoomSpeed\", 1);\n        // Set to false to disable rotating\n        __publicField(this, \"enableRotate\", true);\n        __publicField(this, \"rotateSpeed\", 1);\n        // Set to false to disable panning\n        __publicField(this, \"enablePan\", true);\n        __publicField(this, \"panSpeed\", 1);\n        __publicField(this, \"screenSpacePanning\", true);\n        // if false, pan orthogonal to world-space direction camera.up\n        __publicField(this, \"keyPanSpeed\", 7);\n        // pixels moved per arrow key push\n        __publicField(this, \"zoomToCursor\", false);\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        __publicField(this, \"autoRotate\", false);\n        __publicField(this, \"autoRotateSpeed\", 2);\n        // 30 seconds per orbit when fps is 60\n        __publicField(this, \"reverseOrbit\", false);\n        // true if you want to reverse the orbit to mouse drag from left to right = orbits left\n        __publicField(this, \"reverseHorizontalOrbit\", false);\n        // true if you want to reverse the horizontal orbit direction\n        __publicField(this, \"reverseVerticalOrbit\", false);\n        // true if you want to reverse the vertical orbit direction\n        // The four arrow keys\n        __publicField(this, \"keys\", {\n            LEFT: \"ArrowLeft\",\n            UP: \"ArrowUp\",\n            RIGHT: \"ArrowRight\",\n            BOTTOM: \"ArrowDown\"\n        });\n        // Mouse buttons\n        __publicField(this, \"mouseButtons\", {\n            LEFT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE,\n            MIDDLE: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY,\n            RIGHT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN\n        });\n        // Touch fingers\n        __publicField(this, \"touches\", {\n            ONE: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE,\n            TWO: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN\n        });\n        __publicField(this, \"target0\");\n        __publicField(this, \"position0\");\n        __publicField(this, \"zoom0\");\n        // the target DOM element for key events\n        __publicField(this, \"_domElementKeyEvents\", null);\n        __publicField(this, \"getPolarAngle\");\n        __publicField(this, \"getAzimuthalAngle\");\n        __publicField(this, \"setPolarAngle\");\n        __publicField(this, \"setAzimuthalAngle\");\n        __publicField(this, \"getDistance\");\n        // Not used in most scenarios, however they can be useful for specific use cases\n        __publicField(this, \"getZoomScale\");\n        __publicField(this, \"listenToKeyEvents\");\n        __publicField(this, \"stopListenToKeyEvents\");\n        __publicField(this, \"saveState\");\n        __publicField(this, \"reset\");\n        __publicField(this, \"update\");\n        __publicField(this, \"connect\");\n        __publicField(this, \"dispose\");\n        // Dolly in programmatically\n        __publicField(this, \"dollyIn\");\n        // Dolly out programmatically\n        __publicField(this, \"dollyOut\");\n        // Get the current scale\n        __publicField(this, \"getScale\");\n        // Set the current scale (these are not used in most scenarios, however they can be useful for specific use cases)\n        __publicField(this, \"setScale\");\n        this.object = object;\n        this.domElement = domElement;\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n        this.getPolarAngle = ()=>spherical.phi;\n        this.getAzimuthalAngle = ()=>spherical.theta;\n        this.setPolarAngle = (value)=>{\n            let phi = moduloWrapAround(value, 2 * Math.PI);\n            let currentPhi = spherical.phi;\n            if (currentPhi < 0) currentPhi += 2 * Math.PI;\n            if (phi < 0) phi += 2 * Math.PI;\n            let phiDist = Math.abs(phi - currentPhi);\n            if (2 * Math.PI - phiDist < phiDist) {\n                if (phi < currentPhi) {\n                    phi += 2 * Math.PI;\n                } else {\n                    currentPhi += 2 * Math.PI;\n                }\n            }\n            sphericalDelta.phi = phi - currentPhi;\n            scope.update();\n        };\n        this.setAzimuthalAngle = (value)=>{\n            let theta = moduloWrapAround(value, 2 * Math.PI);\n            let currentTheta = spherical.theta;\n            if (currentTheta < 0) currentTheta += 2 * Math.PI;\n            if (theta < 0) theta += 2 * Math.PI;\n            let thetaDist = Math.abs(theta - currentTheta);\n            if (2 * Math.PI - thetaDist < thetaDist) {\n                if (theta < currentTheta) {\n                    theta += 2 * Math.PI;\n                } else {\n                    currentTheta += 2 * Math.PI;\n                }\n            }\n            sphericalDelta.theta = theta - currentTheta;\n            scope.update();\n        };\n        this.getDistance = ()=>scope.object.position.distanceTo(scope.target);\n        this.listenToKeyEvents = (domElement2)=>{\n            domElement2.addEventListener(\"keydown\", onKeyDown);\n            this._domElementKeyEvents = domElement2;\n        };\n        this.stopListenToKeyEvents = ()=>{\n            this._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n            this._domElementKeyEvents = null;\n        };\n        this.saveState = ()=>{\n            scope.target0.copy(scope.target);\n            scope.position0.copy(scope.object.position);\n            scope.zoom0 = scope.object.zoom;\n        };\n        this.reset = ()=>{\n            scope.target.copy(scope.target0);\n            scope.object.position.copy(scope.position0);\n            scope.object.zoom = scope.zoom0;\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent(changeEvent);\n            scope.update();\n            state = STATE.NONE;\n        };\n        this.update = (()=>{\n            const offset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            const up = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0);\n            const quat = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors(object.up, up);\n            const quatInverse = quat.clone().invert();\n            const lastPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            const lastQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n            const twoPI = 2 * Math.PI;\n            return function update() {\n                const position = scope.object.position;\n                quat.setFromUnitVectors(object.up, up);\n                quatInverse.copy(quat).invert();\n                offset.copy(position).sub(scope.target);\n                offset.applyQuaternion(quat);\n                spherical.setFromVector3(offset);\n                if (scope.autoRotate && state === STATE.NONE) {\n                    rotateLeft(getAutoRotationAngle());\n                }\n                if (scope.enableDamping) {\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n                } else {\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n                }\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n                if (isFinite(min) && isFinite(max)) {\n                    if (min < -Math.PI) min += twoPI;\n                    else if (min > Math.PI) min -= twoPI;\n                    if (max < -Math.PI) max += twoPI;\n                    else if (max > Math.PI) max -= twoPI;\n                    if (min <= max) {\n                        spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n                    } else {\n                        spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);\n                    }\n                }\n                spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n                spherical.makeSafe();\n                if (scope.enableDamping === true) {\n                    scope.target.addScaledVector(panOffset, scope.dampingFactor);\n                } else {\n                    scope.target.add(panOffset);\n                }\n                if (scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera) {\n                    spherical.radius = clampDistance(spherical.radius);\n                } else {\n                    spherical.radius = clampDistance(spherical.radius * scale);\n                }\n                offset.setFromSpherical(spherical);\n                offset.applyQuaternion(quatInverse);\n                position.copy(scope.target).add(offset);\n                if (!scope.object.matrixAutoUpdate) scope.object.updateMatrix();\n                scope.object.lookAt(scope.target);\n                if (scope.enableDamping === true) {\n                    sphericalDelta.theta *= 1 - scope.dampingFactor;\n                    sphericalDelta.phi *= 1 - scope.dampingFactor;\n                    panOffset.multiplyScalar(1 - scope.dampingFactor);\n                } else {\n                    sphericalDelta.set(0, 0, 0);\n                    panOffset.set(0, 0, 0);\n                }\n                let zoomChanged = false;\n                if (scope.zoomToCursor && performCursorZoom) {\n                    let newRadius = null;\n                    if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera) {\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance(prevRadius * scale);\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n                        scope.object.updateMatrixWorld();\n                    } else if (scope.object.isOrthographicCamera) {\n                        const mouseBefore = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouse.x, mouse.y, 0);\n                        mouseBefore.unproject(scope.object);\n                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n                        const mouseAfter = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(mouse.x, mouse.y, 0);\n                        mouseAfter.unproject(scope.object);\n                        scope.object.position.sub(mouseAfter).add(mouseBefore);\n                        scope.object.updateMatrixWorld();\n                        newRadius = offset.length();\n                    } else {\n                        console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n                        scope.zoomToCursor = false;\n                    }\n                    if (newRadius !== null) {\n                        if (scope.screenSpacePanning) {\n                            scope.target.set(0, 0, -1).transformDirection(scope.object.matrix).multiplyScalar(newRadius).add(scope.object.position);\n                        } else {\n                            _ray.origin.copy(scope.object.position);\n                            _ray.direction.set(0, 0, -1).transformDirection(scope.object.matrix);\n                            if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                                object.lookAt(scope.target);\n                            } else {\n                                _plane.setFromNormalAndCoplanarPoint(scope.object.up, scope.target);\n                                _ray.intersectPlane(_plane, scope.target);\n                            }\n                        }\n                    }\n                } else if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                    zoomChanged = scale !== 1;\n                    if (zoomChanged) {\n                        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / scale));\n                        scope.object.updateProjectionMatrix();\n                    }\n                }\n                scale = 1;\n                performCursorZoom = false;\n                if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n                    scope.dispatchEvent(changeEvent);\n                    lastPosition.copy(scope.object.position);\n                    lastQuaternion.copy(scope.object.quaternion);\n                    zoomChanged = false;\n                    return true;\n                }\n                return false;\n            };\n        })();\n        this.connect = (domElement2)=>{\n            scope.domElement = domElement2;\n            scope.domElement.style.touchAction = \"none\";\n            scope.domElement.addEventListener(\"contextmenu\", onContextMenu);\n            scope.domElement.addEventListener(\"pointerdown\", onPointerDown);\n            scope.domElement.addEventListener(\"pointercancel\", onPointerUp);\n            scope.domElement.addEventListener(\"wheel\", onMouseWheel);\n        };\n        this.dispose = ()=>{\n            var _a, _b, _c, _d, _e, _f;\n            if (scope.domElement) {\n                scope.domElement.style.touchAction = \"auto\";\n            }\n            (_a = scope.domElement) == null ? void 0 : _a.removeEventListener(\"contextmenu\", onContextMenu);\n            (_b = scope.domElement) == null ? void 0 : _b.removeEventListener(\"pointerdown\", onPointerDown);\n            (_c = scope.domElement) == null ? void 0 : _c.removeEventListener(\"pointercancel\", onPointerUp);\n            (_d = scope.domElement) == null ? void 0 : _d.removeEventListener(\"wheel\", onMouseWheel);\n            (_e = scope.domElement) == null ? void 0 : _e.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n            (_f = scope.domElement) == null ? void 0 : _f.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n            if (scope._domElementKeyEvents !== null) {\n                scope._domElementKeyEvents.removeEventListener(\"keydown\", onKeyDown);\n            }\n        };\n        const scope = this;\n        const changeEvent = {\n            type: \"change\"\n        };\n        const startEvent = {\n            type: \"start\"\n        };\n        const endEvent = {\n            type: \"end\"\n        };\n        const STATE = {\n            NONE: -1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n        let state = STATE.NONE;\n        const EPS = 1e-6;\n        const spherical = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        const sphericalDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        let scale = 1;\n        const panOffset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        const rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const panDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        const dollyDirection = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        const mouse = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        let performCursorZoom = false;\n        const pointers = [];\n        const pointerPositions = {};\n        function getAutoRotationAngle() {\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n        }\n        function getZoomScale() {\n            return Math.pow(0.95, scope.zoomSpeed);\n        }\n        function rotateLeft(angle) {\n            if (scope.reverseOrbit || scope.reverseHorizontalOrbit) {\n                sphericalDelta.theta += angle;\n            } else {\n                sphericalDelta.theta -= angle;\n            }\n        }\n        function rotateUp(angle) {\n            if (scope.reverseOrbit || scope.reverseVerticalOrbit) {\n                sphericalDelta.phi += angle;\n            } else {\n                sphericalDelta.phi -= angle;\n            }\n        }\n        const panLeft = (()=>{\n            const v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function panLeft2(distance, objectMatrix) {\n                v.setFromMatrixColumn(objectMatrix, 0);\n                v.multiplyScalar(-distance);\n                panOffset.add(v);\n            };\n        })();\n        const panUp = (()=>{\n            const v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function panUp2(distance, objectMatrix) {\n                if (scope.screenSpacePanning === true) {\n                    v.setFromMatrixColumn(objectMatrix, 1);\n                } else {\n                    v.setFromMatrixColumn(objectMatrix, 0);\n                    v.crossVectors(scope.object.up, v);\n                }\n                v.multiplyScalar(distance);\n                panOffset.add(v);\n            };\n        })();\n        const pan = (()=>{\n            const offset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            return function pan2(deltaX, deltaY) {\n                const element = scope.domElement;\n                if (element && scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera) {\n                    const position = scope.object.position;\n                    offset.copy(position).sub(scope.target);\n                    let targetDistance = offset.length();\n                    targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180);\n                    panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n                    panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n                } else if (element && scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                    panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n                    panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n                } else {\n                    console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n                    scope.enablePan = false;\n                }\n            };\n        })();\n        function setScale(newScale) {\n            if (scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera && scope.object.isPerspectiveCamera || scope.object instanceof three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera && scope.object.isOrthographicCamera) {\n                scale = newScale;\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n                scope.enableZoom = false;\n            }\n        }\n        function dollyOut(dollyScale) {\n            setScale(scale / dollyScale);\n        }\n        function dollyIn(dollyScale) {\n            setScale(scale * dollyScale);\n        }\n        function updateMouseParameters(event) {\n            if (!scope.zoomToCursor || !scope.domElement) {\n                return;\n            }\n            performCursorZoom = true;\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n            mouse.x = x / w * 2 - 1;\n            mouse.y = -(y / h) * 2 + 1;\n            dollyDirection.set(mouse.x, mouse.y, 1).unproject(scope.object).sub(scope.object.position).normalize();\n        }\n        function clampDistance(dist) {\n            return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n        }\n        function handleMouseDownRotate(event) {\n            rotateStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseDownDolly(event) {\n            updateMouseParameters(event);\n            dollyStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseDownPan(event) {\n            panStart.set(event.clientX, event.clientY);\n        }\n        function handleMouseMoveRotate(event) {\n            rotateEnd.set(event.clientX, event.clientY);\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n            const element = scope.domElement;\n            if (element) {\n                rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n                rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n            }\n            rotateStart.copy(rotateEnd);\n            scope.update();\n        }\n        function handleMouseMoveDolly(event) {\n            dollyEnd.set(event.clientX, event.clientY);\n            dollyDelta.subVectors(dollyEnd, dollyStart);\n            if (dollyDelta.y > 0) {\n                dollyOut(getZoomScale());\n            } else if (dollyDelta.y < 0) {\n                dollyIn(getZoomScale());\n            }\n            dollyStart.copy(dollyEnd);\n            scope.update();\n        }\n        function handleMouseMovePan(event) {\n            panEnd.set(event.clientX, event.clientY);\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n            pan(panDelta.x, panDelta.y);\n            panStart.copy(panEnd);\n            scope.update();\n        }\n        function handleMouseWheel(event) {\n            updateMouseParameters(event);\n            if (event.deltaY < 0) {\n                dollyIn(getZoomScale());\n            } else if (event.deltaY > 0) {\n                dollyOut(getZoomScale());\n            }\n            scope.update();\n        }\n        function handleKeyDown(event) {\n            let needsUpdate = false;\n            switch(event.code){\n                case scope.keys.UP:\n                    pan(0, scope.keyPanSpeed);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.BOTTOM:\n                    pan(0, -scope.keyPanSpeed);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.LEFT:\n                    pan(scope.keyPanSpeed, 0);\n                    needsUpdate = true;\n                    break;\n                case scope.keys.RIGHT:\n                    pan(-scope.keyPanSpeed, 0);\n                    needsUpdate = true;\n                    break;\n            }\n            if (needsUpdate) {\n                event.preventDefault();\n                scope.update();\n            }\n        }\n        function handleTouchStartRotate() {\n            if (pointers.length == 1) {\n                rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n            } else {\n                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n                rotateStart.set(x, y);\n            }\n        }\n        function handleTouchStartPan() {\n            if (pointers.length == 1) {\n                panStart.set(pointers[0].pageX, pointers[0].pageY);\n            } else {\n                const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n                const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n                panStart.set(x, y);\n            }\n        }\n        function handleTouchStartDolly() {\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n        function handleTouchStartDollyPan() {\n            if (scope.enableZoom) handleTouchStartDolly();\n            if (scope.enablePan) handleTouchStartPan();\n        }\n        function handleTouchStartDollyRotate() {\n            if (scope.enableZoom) handleTouchStartDolly();\n            if (scope.enableRotate) handleTouchStartRotate();\n        }\n        function handleTouchMoveRotate(event) {\n            if (pointers.length == 1) {\n                rotateEnd.set(event.pageX, event.pageY);\n            } else {\n                const position = getSecondPointerPosition(event);\n                const x = 0.5 * (event.pageX + position.x);\n                const y = 0.5 * (event.pageY + position.y);\n                rotateEnd.set(x, y);\n            }\n            rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n            const element = scope.domElement;\n            if (element) {\n                rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight);\n                rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n            }\n            rotateStart.copy(rotateEnd);\n        }\n        function handleTouchMovePan(event) {\n            if (pointers.length == 1) {\n                panEnd.set(event.pageX, event.pageY);\n            } else {\n                const position = getSecondPointerPosition(event);\n                const x = 0.5 * (event.pageX + position.x);\n                const y = 0.5 * (event.pageY + position.y);\n                panEnd.set(x, y);\n            }\n            panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n            pan(panDelta.x, panDelta.y);\n            panStart.copy(panEnd);\n        }\n        function handleTouchMoveDolly(event) {\n            const position = getSecondPointerPosition(event);\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            dollyEnd.set(0, distance);\n            dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n            dollyOut(dollyDelta.y);\n            dollyStart.copy(dollyEnd);\n        }\n        function handleTouchMoveDollyPan(event) {\n            if (scope.enableZoom) handleTouchMoveDolly(event);\n            if (scope.enablePan) handleTouchMovePan(event);\n        }\n        function handleTouchMoveDollyRotate(event) {\n            if (scope.enableZoom) handleTouchMoveDolly(event);\n            if (scope.enableRotate) handleTouchMoveRotate(event);\n        }\n        function onPointerDown(event) {\n            var _a, _b;\n            if (scope.enabled === false) return;\n            if (pointers.length === 0) {\n                (_a = scope.domElement) == null ? void 0 : _a.ownerDocument.addEventListener(\"pointermove\", onPointerMove);\n                (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.addEventListener(\"pointerup\", onPointerUp);\n            }\n            addPointer(event);\n            if (event.pointerType === \"touch\") {\n                onTouchStart(event);\n            } else {\n                onMouseDown(event);\n            }\n        }\n        function onPointerMove(event) {\n            if (scope.enabled === false) return;\n            if (event.pointerType === \"touch\") {\n                onTouchMove(event);\n            } else {\n                onMouseMove(event);\n            }\n        }\n        function onPointerUp(event) {\n            var _a, _b, _c;\n            removePointer(event);\n            if (pointers.length === 0) {\n                (_a = scope.domElement) == null ? void 0 : _a.releasePointerCapture(event.pointerId);\n                (_b = scope.domElement) == null ? void 0 : _b.ownerDocument.removeEventListener(\"pointermove\", onPointerMove);\n                (_c = scope.domElement) == null ? void 0 : _c.ownerDocument.removeEventListener(\"pointerup\", onPointerUp);\n            }\n            scope.dispatchEvent(endEvent);\n            state = STATE.NONE;\n        }\n        function onMouseDown(event) {\n            let mouseAction;\n            switch(event.button){\n                case 0:\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n                case 1:\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n                case 2:\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n                default:\n                    mouseAction = -1;\n            }\n            switch(mouseAction){\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n                    if (scope.enableZoom === false) return;\n                    handleMouseDownDolly(event);\n                    state = STATE.DOLLY;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n                    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                        if (scope.enablePan === false) return;\n                        handleMouseDownPan(event);\n                        state = STATE.PAN;\n                    } else {\n                        if (scope.enableRotate === false) return;\n                        handleMouseDownRotate(event);\n                        state = STATE.ROTATE;\n                    }\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n                    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                        if (scope.enableRotate === false) return;\n                        handleMouseDownRotate(event);\n                        state = STATE.ROTATE;\n                    } else {\n                        if (scope.enablePan === false) return;\n                        handleMouseDownPan(event);\n                        state = STATE.PAN;\n                    }\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n            if (state !== STATE.NONE) {\n                scope.dispatchEvent(startEvent);\n            }\n        }\n        function onMouseMove(event) {\n            if (scope.enabled === false) return;\n            switch(state){\n                case STATE.ROTATE:\n                    if (scope.enableRotate === false) return;\n                    handleMouseMoveRotate(event);\n                    break;\n                case STATE.DOLLY:\n                    if (scope.enableZoom === false) return;\n                    handleMouseMoveDolly(event);\n                    break;\n                case STATE.PAN:\n                    if (scope.enablePan === false) return;\n                    handleMouseMovePan(event);\n                    break;\n            }\n        }\n        function onMouseWheel(event) {\n            if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) {\n                return;\n            }\n            event.preventDefault();\n            scope.dispatchEvent(startEvent);\n            handleMouseWheel(event);\n            scope.dispatchEvent(endEvent);\n        }\n        function onKeyDown(event) {\n            if (scope.enabled === false || scope.enablePan === false) return;\n            handleKeyDown(event);\n        }\n        function onTouchStart(event) {\n            trackPointer(event);\n            switch(pointers.length){\n                case 1:\n                    switch(scope.touches.ONE){\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n                            if (scope.enableRotate === false) return;\n                            handleTouchStartRotate();\n                            state = STATE.TOUCH_ROTATE;\n                            break;\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n                            if (scope.enablePan === false) return;\n                            handleTouchStartPan();\n                            state = STATE.TOUCH_PAN;\n                            break;\n                        default:\n                            state = STATE.NONE;\n                    }\n                    break;\n                case 2:\n                    switch(scope.touches.TWO){\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n                            if (scope.enableZoom === false && scope.enablePan === false) return;\n                            handleTouchStartDollyPan();\n                            state = STATE.TOUCH_DOLLY_PAN;\n                            break;\n                        case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n                            if (scope.enableZoom === false && scope.enableRotate === false) return;\n                            handleTouchStartDollyRotate();\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n                            break;\n                        default:\n                            state = STATE.NONE;\n                    }\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n            if (state !== STATE.NONE) {\n                scope.dispatchEvent(startEvent);\n            }\n        }\n        function onTouchMove(event) {\n            trackPointer(event);\n            switch(state){\n                case STATE.TOUCH_ROTATE:\n                    if (scope.enableRotate === false) return;\n                    handleTouchMoveRotate(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_PAN:\n                    if (scope.enablePan === false) return;\n                    handleTouchMovePan(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_DOLLY_PAN:\n                    if (scope.enableZoom === false && scope.enablePan === false) return;\n                    handleTouchMoveDollyPan(event);\n                    scope.update();\n                    break;\n                case STATE.TOUCH_DOLLY_ROTATE:\n                    if (scope.enableZoom === false && scope.enableRotate === false) return;\n                    handleTouchMoveDollyRotate(event);\n                    scope.update();\n                    break;\n                default:\n                    state = STATE.NONE;\n            }\n        }\n        function onContextMenu(event) {\n            if (scope.enabled === false) return;\n            event.preventDefault();\n        }\n        function addPointer(event) {\n            pointers.push(event);\n        }\n        function removePointer(event) {\n            delete pointerPositions[event.pointerId];\n            for(let i = 0; i < pointers.length; i++){\n                if (pointers[i].pointerId == event.pointerId) {\n                    pointers.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function trackPointer(event) {\n            let position = pointerPositions[event.pointerId];\n            if (position === void 0) {\n                position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n                pointerPositions[event.pointerId] = position;\n            }\n            position.set(event.pageX, event.pageY);\n        }\n        function getSecondPointerPosition(event) {\n            const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n            return pointerPositions[pointer.pointerId];\n        }\n        this.dollyIn = (dollyScale = getZoomScale())=>{\n            dollyIn(dollyScale);\n            scope.update();\n        };\n        this.dollyOut = (dollyScale = getZoomScale())=>{\n            dollyOut(dollyScale);\n            scope.update();\n        };\n        this.getScale = ()=>{\n            return scale;\n        };\n        this.setScale = (newScale)=>{\n            setScale(newScale);\n            scope.update();\n        };\n        this.getZoomScale = ()=>{\n            return getZoomScale();\n        };\n        if (domElement !== void 0) this.connect(domElement);\n        this.update();\n    }\n}\nclass MapControls extends OrbitControls {\n    constructor(object, domElement){\n        super(object, domElement);\n        this.screenSpacePanning = false;\n        this.mouseButtons.LEFT = three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN;\n        this.mouseButtons.RIGHT = three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE;\n        this.touches.ONE = three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN;\n        this.touches.TWO = three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE;\n    }\n}\n //# sourceMappingURL=OrbitControls.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/Line2.js":
/*!**************************************************!*\
  !*** ./node_modules/three-stdlib/lines/Line2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Line2: () => (/* binding */ Line2)\n/* harmony export */ });\n/* harmony import */ var _LineSegments2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LineSegments2.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js\");\n/* harmony import */ var _LineGeometry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LineGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js\");\n/* harmony import */ var _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineMaterial.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\");\n\n\n\nclass Line2 extends _LineSegments2_js__WEBPACK_IMPORTED_MODULE_0__.LineSegments2 {\n    constructor(geometry = new _LineGeometry_js__WEBPACK_IMPORTED_MODULE_1__.LineGeometry(), material = new _LineMaterial_js__WEBPACK_IMPORTED_MODULE_2__.LineMaterial({\n        color: Math.random() * 16777215\n    })){\n        super(geometry, material);\n        this.isLine2 = true;\n        this.type = \"Line2\";\n    }\n}\n //# sourceMappingURL=Line2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmUyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7QUFDRjtBQUNBO0FBQ2pELE1BQU1HLGNBQWNILDREQUFhQTtJQUMvQkksWUFBWUMsV0FBVyxJQUFJSiwwREFBWUEsRUFBRSxFQUFFSyxXQUFXLElBQUlKLDBEQUFZQSxDQUFDO1FBQUVLLE9BQU9DLEtBQUtDLE1BQU0sS0FBSztJQUFTLEVBQUUsQ0FBRTtRQUMzRyxLQUFLLENBQUNKLFVBQVVDO1FBQ2hCLElBQUksQ0FBQ0ksT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBR0UsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb2Z0d2FyZS1lbmdpbmVlci1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmUyLmpzPzAyMGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGluZVNlZ21lbnRzMiB9IGZyb20gXCIuL0xpbmVTZWdtZW50czIuanNcIjtcbmltcG9ydCB7IExpbmVHZW9tZXRyeSB9IGZyb20gXCIuL0xpbmVHZW9tZXRyeS5qc1wiO1xuaW1wb3J0IHsgTGluZU1hdGVyaWFsIH0gZnJvbSBcIi4vTGluZU1hdGVyaWFsLmpzXCI7XG5jbGFzcyBMaW5lMiBleHRlbmRzIExpbmVTZWdtZW50czIge1xuICBjb25zdHJ1Y3RvcihnZW9tZXRyeSA9IG5ldyBMaW5lR2VvbWV0cnkoKSwgbWF0ZXJpYWwgPSBuZXcgTGluZU1hdGVyaWFsKHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAxNjc3NzIxNSB9KSkge1xuICAgIHN1cGVyKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgdGhpcy5pc0xpbmUyID0gdHJ1ZTtcbiAgICB0aGlzLnR5cGUgPSBcIkxpbmUyXCI7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIExpbmUyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGluZTIuanMubWFwXG4iXSwibmFtZXMiOlsiTGluZVNlZ21lbnRzMiIsIkxpbmVHZW9tZXRyeSIsIkxpbmVNYXRlcmlhbCIsIkxpbmUyIiwiY29uc3RydWN0b3IiLCJnZW9tZXRyeSIsIm1hdGVyaWFsIiwiY29sb3IiLCJNYXRoIiwicmFuZG9tIiwiaXNMaW5lMiIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/Line2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js":
/*!*********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineGeometry.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineGeometry: () => (/* binding */ LineGeometry)\n/* harmony export */ });\n/* harmony import */ var _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LineSegmentsGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\");\n\nclass LineGeometry extends _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_0__.LineSegmentsGeometry {\n    constructor(){\n        super();\n        this.isLineGeometry = true;\n        this.type = \"LineGeometry\";\n    }\n    setPositions(array) {\n        const length = array.length - 3;\n        const points = new Float32Array(2 * length);\n        for(let i = 0; i < length; i += 3){\n            points[2 * i] = array[i];\n            points[2 * i + 1] = array[i + 1];\n            points[2 * i + 2] = array[i + 2];\n            points[2 * i + 3] = array[i + 3];\n            points[2 * i + 4] = array[i + 4];\n            points[2 * i + 5] = array[i + 5];\n        }\n        super.setPositions(points);\n        return this;\n    }\n    setColors(array, itemSize = 3) {\n        const length = array.length - itemSize;\n        const colors = new Float32Array(2 * length);\n        if (itemSize === 3) {\n            for(let i = 0; i < length; i += itemSize){\n                colors[2 * i] = array[i];\n                colors[2 * i + 1] = array[i + 1];\n                colors[2 * i + 2] = array[i + 2];\n                colors[2 * i + 3] = array[i + 3];\n                colors[2 * i + 4] = array[i + 4];\n                colors[2 * i + 5] = array[i + 5];\n            }\n        } else {\n            for(let i = 0; i < length; i += itemSize){\n                colors[2 * i] = array[i];\n                colors[2 * i + 1] = array[i + 1];\n                colors[2 * i + 2] = array[i + 2];\n                colors[2 * i + 3] = array[i + 3];\n                colors[2 * i + 4] = array[i + 4];\n                colors[2 * i + 5] = array[i + 5];\n                colors[2 * i + 6] = array[i + 6];\n                colors[2 * i + 7] = array[i + 7];\n            }\n        }\n        super.setColors(colors, itemSize);\n        return this;\n    }\n    fromLine(line) {\n        const geometry = line.geometry;\n        this.setPositions(geometry.attributes.position.array);\n        return this;\n    }\n}\n //# sourceMappingURL=LineGeometry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtc3RkbGliL2xpbmVzL0xpbmVHZW9tZXRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRTtBQUNqRSxNQUFNQyxxQkFBcUJELDBFQUFvQkE7SUFDN0NFLGFBQWM7UUFDWixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxjQUFjLEdBQUc7UUFDdEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtJQUNBQyxhQUFhQyxLQUFLLEVBQUU7UUFDbEIsTUFBTUMsU0FBU0QsTUFBTUMsTUFBTSxHQUFHO1FBQzlCLE1BQU1DLFNBQVMsSUFBSUMsYUFBYSxJQUFJRjtRQUNwQyxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsS0FBSyxFQUFHO1lBQ2xDRixNQUFNLENBQUMsSUFBSUUsRUFBRSxHQUFHSixLQUFLLENBQUNJLEVBQUU7WUFDeEJGLE1BQU0sQ0FBQyxJQUFJRSxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7WUFDaENGLE1BQU0sQ0FBQyxJQUFJRSxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7WUFDaENGLE1BQU0sQ0FBQyxJQUFJRSxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7WUFDaENGLE1BQU0sQ0FBQyxJQUFJRSxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7WUFDaENGLE1BQU0sQ0FBQyxJQUFJRSxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7UUFDbEM7UUFDQSxLQUFLLENBQUNMLGFBQWFHO1FBQ25CLE9BQU8sSUFBSTtJQUNiO0lBQ0FHLFVBQVVMLEtBQUssRUFBRU0sV0FBVyxDQUFDLEVBQUU7UUFDN0IsTUFBTUwsU0FBU0QsTUFBTUMsTUFBTSxHQUFHSztRQUM5QixNQUFNQyxTQUFTLElBQUlKLGFBQWEsSUFBSUY7UUFDcEMsSUFBSUssYUFBYSxHQUFHO1lBQ2xCLElBQUssSUFBSUYsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxLQUFLRSxTQUFVO2dCQUN6Q0MsTUFBTSxDQUFDLElBQUlILEVBQUUsR0FBR0osS0FBSyxDQUFDSSxFQUFFO2dCQUN4QkcsTUFBTSxDQUFDLElBQUlILElBQUksRUFBRSxHQUFHSixLQUFLLENBQUNJLElBQUksRUFBRTtnQkFDaENHLE1BQU0sQ0FBQyxJQUFJSCxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7Z0JBQ2hDRyxNQUFNLENBQUMsSUFBSUgsSUFBSSxFQUFFLEdBQUdKLEtBQUssQ0FBQ0ksSUFBSSxFQUFFO2dCQUNoQ0csTUFBTSxDQUFDLElBQUlILElBQUksRUFBRSxHQUFHSixLQUFLLENBQUNJLElBQUksRUFBRTtnQkFDaENHLE1BQU0sQ0FBQyxJQUFJSCxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7WUFDbEM7UUFDRixPQUFPO1lBQ0wsSUFBSyxJQUFJQSxJQUFJLEdBQUdBLElBQUlILFFBQVFHLEtBQUtFLFNBQVU7Z0JBQ3pDQyxNQUFNLENBQUMsSUFBSUgsRUFBRSxHQUFHSixLQUFLLENBQUNJLEVBQUU7Z0JBQ3hCRyxNQUFNLENBQUMsSUFBSUgsSUFBSSxFQUFFLEdBQUdKLEtBQUssQ0FBQ0ksSUFBSSxFQUFFO2dCQUNoQ0csTUFBTSxDQUFDLElBQUlILElBQUksRUFBRSxHQUFHSixLQUFLLENBQUNJLElBQUksRUFBRTtnQkFDaENHLE1BQU0sQ0FBQyxJQUFJSCxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7Z0JBQ2hDRyxNQUFNLENBQUMsSUFBSUgsSUFBSSxFQUFFLEdBQUdKLEtBQUssQ0FBQ0ksSUFBSSxFQUFFO2dCQUNoQ0csTUFBTSxDQUFDLElBQUlILElBQUksRUFBRSxHQUFHSixLQUFLLENBQUNJLElBQUksRUFBRTtnQkFDaENHLE1BQU0sQ0FBQyxJQUFJSCxJQUFJLEVBQUUsR0FBR0osS0FBSyxDQUFDSSxJQUFJLEVBQUU7Z0JBQ2hDRyxNQUFNLENBQUMsSUFBSUgsSUFBSSxFQUFFLEdBQUdKLEtBQUssQ0FBQ0ksSUFBSSxFQUFFO1lBQ2xDO1FBQ0Y7UUFDQSxLQUFLLENBQUNDLFVBQVVFLFFBQVFEO1FBQ3hCLE9BQU8sSUFBSTtJQUNiO0lBQ0FFLFNBQVNDLElBQUksRUFBRTtRQUNiLE1BQU1DLFdBQVdELEtBQUtDLFFBQVE7UUFDOUIsSUFBSSxDQUFDWCxZQUFZLENBQUNXLFNBQVNDLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDWixLQUFLO1FBQ3BELE9BQU8sSUFBSTtJQUNiO0FBQ0Y7QUFHRSxDQUNGLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3NvZnR3YXJlLWVuZ2luZWVyLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy90aHJlZS1zdGRsaWIvbGluZXMvTGluZUdlb21ldHJ5LmpzPzczYTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGluZVNlZ21lbnRzR2VvbWV0cnkgfSBmcm9tIFwiLi9MaW5lU2VnbWVudHNHZW9tZXRyeS5qc1wiO1xuY2xhc3MgTGluZUdlb21ldHJ5IGV4dGVuZHMgTGluZVNlZ21lbnRzR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaXNMaW5lR2VvbWV0cnkgPSB0cnVlO1xuICAgIHRoaXMudHlwZSA9IFwiTGluZUdlb21ldHJ5XCI7XG4gIH1cbiAgc2V0UG9zaXRpb25zKGFycmF5KSB7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIC0gMztcbiAgICBjb25zdCBwb2ludHMgPSBuZXcgRmxvYXQzMkFycmF5KDIgKiBsZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIHBvaW50c1syICogaV0gPSBhcnJheVtpXTtcbiAgICAgIHBvaW50c1syICogaSArIDFdID0gYXJyYXlbaSArIDFdO1xuICAgICAgcG9pbnRzWzIgKiBpICsgMl0gPSBhcnJheVtpICsgMl07XG4gICAgICBwb2ludHNbMiAqIGkgKyAzXSA9IGFycmF5W2kgKyAzXTtcbiAgICAgIHBvaW50c1syICogaSArIDRdID0gYXJyYXlbaSArIDRdO1xuICAgICAgcG9pbnRzWzIgKiBpICsgNV0gPSBhcnJheVtpICsgNV07XG4gICAgfVxuICAgIHN1cGVyLnNldFBvc2l0aW9ucyhwb2ludHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldENvbG9ycyhhcnJheSwgaXRlbVNpemUgPSAzKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIC0gaXRlbVNpemU7XG4gICAgY29uc3QgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSgyICogbGVuZ3RoKTtcbiAgICBpZiAoaXRlbVNpemUgPT09IDMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IGl0ZW1TaXplKSB7XG4gICAgICAgIGNvbG9yc1syICogaV0gPSBhcnJheVtpXTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgMV0gPSBhcnJheVtpICsgMV07XG4gICAgICAgIGNvbG9yc1syICogaSArIDJdID0gYXJyYXlbaSArIDJdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyAzXSA9IGFycmF5W2kgKyAzXTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgNF0gPSBhcnJheVtpICsgNF07XG4gICAgICAgIGNvbG9yc1syICogaSArIDVdID0gYXJyYXlbaSArIDVdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBpdGVtU2l6ZSkge1xuICAgICAgICBjb2xvcnNbMiAqIGldID0gYXJyYXlbaV07XG4gICAgICAgIGNvbG9yc1syICogaSArIDFdID0gYXJyYXlbaSArIDFdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyAyXSA9IGFycmF5W2kgKyAyXTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgM10gPSBhcnJheVtpICsgM107XG4gICAgICAgIGNvbG9yc1syICogaSArIDRdID0gYXJyYXlbaSArIDRdO1xuICAgICAgICBjb2xvcnNbMiAqIGkgKyA1XSA9IGFycmF5W2kgKyA1XTtcbiAgICAgICAgY29sb3JzWzIgKiBpICsgNl0gPSBhcnJheVtpICsgNl07XG4gICAgICAgIGNvbG9yc1syICogaSArIDddID0gYXJyYXlbaSArIDddO1xuICAgICAgfVxuICAgIH1cbiAgICBzdXBlci5zZXRDb2xvcnMoY29sb3JzLCBpdGVtU2l6ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnJvbUxpbmUobGluZSkge1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbGluZS5nZW9tZXRyeTtcbiAgICB0aGlzLnNldFBvc2l0aW9ucyhnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZXhwb3J0IHtcbiAgTGluZUdlb21ldHJ5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGluZUdlb21ldHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkxpbmVTZWdtZW50c0dlb21ldHJ5IiwiTGluZUdlb21ldHJ5IiwiY29uc3RydWN0b3IiLCJpc0xpbmVHZW9tZXRyeSIsInR5cGUiLCJzZXRQb3NpdGlvbnMiLCJhcnJheSIsImxlbmd0aCIsInBvaW50cyIsIkZsb2F0MzJBcnJheSIsImkiLCJzZXRDb2xvcnMiLCJpdGVtU2l6ZSIsImNvbG9ycyIsImZyb21MaW5lIiwibGluZSIsImdlb21ldHJ5IiwiYXR0cmlidXRlcyIsInBvc2l0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineGeometry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js":
/*!*********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineMaterial.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineMaterial: () => (/* binding */ LineMaterial)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _polyfill_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_polyfill/constants.js */ \"(ssr)/./node_modules/three-stdlib/_polyfill/constants.js\");\n\n\nclass LineMaterial extends three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial {\n    constructor(parameters){\n        super({\n            type: \"LineMaterial\",\n            uniforms: three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone(three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.merge([\n                three__WEBPACK_IMPORTED_MODULE_0__.UniformsLib.common,\n                three__WEBPACK_IMPORTED_MODULE_0__.UniformsLib.fog,\n                {\n                    worldUnits: {\n                        value: 1\n                    },\n                    linewidth: {\n                        value: 1\n                    },\n                    resolution: {\n                        value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(1, 1)\n                    },\n                    dashOffset: {\n                        value: 0\n                    },\n                    dashScale: {\n                        value: 1\n                    },\n                    dashSize: {\n                        value: 1\n                    },\n                    gapSize: {\n                        value: 1\n                    }\n                }\n            ])),\n            vertexShader: /* glsl */ `\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\n\t\t\t\tuniform float linewidth;\n\t\t\t\tuniform vec2 resolution;\n\n\t\t\t\tattribute vec3 instanceStart;\n\t\t\t\tattribute vec3 instanceEnd;\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t\tattribute vec4 instanceColorStart;\n\t\t\t\t\t\tattribute vec4 instanceColorEnd;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t\tattribute vec3 instanceColorStart;\n\t\t\t\t\t\tattribute vec3 instanceColorEnd;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashScale;\n\t\t\t\t\tattribute float instanceDistanceStart;\n\t\t\t\t\tattribute float instanceDistanceEnd;\n\t\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#endif\n\n\t\t\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t\t\t// conservative estimate of the near plane\n\t\t\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#ifdef USE_COLOR\n\n\t\t\t\t\t\tvLineColor = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\t\t\t// camera space\n\t\t\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\tworldStart = start.xyz;\n\t\t\t\t\t\tworldEnd = end.xyz;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\t\t\tif ( perspective ) {\n\n\t\t\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// clip space\n\t\t\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t\t\t// ndc space\n\t\t\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t\t\t// direction\n\t\t\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t\t\t// account for clip-space aspect ratio\n\t\t\t\t\tdir.x *= aspect;\n\t\t\t\t\tdir = normalize( dir );\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\t\t\tvec3 offset;\n\t\t\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t\t\t// set the world position\n\t\t\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t\t\t// project the worldpos\n\t\t\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t\t\t// segments overlap neatly\n\t\t\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t\t\t\t// undo aspect ratio adjustment\n\t\t\t\t\t\tdir.x /= aspect;\n\t\t\t\t\t\toffset.x /= aspect;\n\n\t\t\t\t\t\t// sign flip\n\t\t\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\t\t\t// endcaps\n\t\t\t\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\t\t\t\toffset += - dir;\n\n\t\t\t\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\t\t\t\toffset += dir;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// adjust for linewidth\n\t\t\t\t\t\toffset *= linewidth;\n\n\t\t\t\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\t\t\t\toffset /= resolution.y;\n\n\t\t\t\t\t\t// select end\n\t\t\t\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t\t\t\t// back to clip space\n\t\t\t\t\t\toffset *= clip.w;\n\n\t\t\t\t\t\tclip.xy += offset;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tgl_Position = clip;\n\n\t\t\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n            fragmentShader: /* glsl */ `\n\t\t\t\tuniform vec3 diffuse;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform float linewidth;\n\n\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\tuniform float dashOffset;\n\t\t\t\t\tuniform float dashSize;\n\t\t\t\t\tuniform float gapSize;\n\n\t\t\t\t#endif\n\n\t\t\t\tvarying float vLineDistance;\n\n\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\tvarying vec4 worldPos;\n\t\t\t\t\tvarying vec3 worldStart;\n\t\t\t\t\tvarying vec3 worldEnd;\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t\t#endif\n\n\t\t\t\t#else\n\n\t\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>\n\n\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\tvarying vec4 vLineColor;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 vLineColor;\n\t\t\t\t\t#endif\n\t\t\t\t#endif\n\n\t\t\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\t\t\tfloat mua;\n\t\t\t\t\tfloat mub;\n\n\t\t\t\t\tvec3 p13 = p1 - p3;\n\t\t\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\t\t\tmua = numer / denom;\n\t\t\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\t\t\treturn vec2( mua, mub );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t\t\t#ifdef USE_DASH\n\n\t\t\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat alpha = opacity;\n\n\t\t\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\t\t\tfloat len = length( delta );\n\t\t\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t#ifdef USE_ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\t\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\t\t\t\t\t#ifdef USE_COLOR\n\t\t\t\t\t\t#ifdef USE_LINE_COLOR_ALPHA\n\t\t\t\t\t\t\tdiffuseColor *= vLineColor;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tdiffuseColor.rgb *= vLineColor;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\t\t\tgl_FragColor = diffuseColor;\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${_polyfill_constants_js__WEBPACK_IMPORTED_MODULE_1__.version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`,\n            clipping: true\n        });\n        this.isLineMaterial = true;\n        this.onBeforeCompile = function() {\n            if (this.transparent) {\n                this.defines.USE_LINE_COLOR_ALPHA = \"1\";\n            } else {\n                delete this.defines.USE_LINE_COLOR_ALPHA;\n            }\n        };\n        Object.defineProperties(this, {\n            color: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.diffuse.value;\n                },\n                set: function(value) {\n                    this.uniforms.diffuse.value = value;\n                }\n            },\n            worldUnits: {\n                enumerable: true,\n                get: function() {\n                    return \"WORLD_UNITS\" in this.defines;\n                },\n                set: function(value) {\n                    if (value === true) {\n                        this.defines.WORLD_UNITS = \"\";\n                    } else {\n                        delete this.defines.WORLD_UNITS;\n                    }\n                }\n            },\n            linewidth: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.linewidth.value;\n                },\n                set: function(value) {\n                    this.uniforms.linewidth.value = value;\n                }\n            },\n            dashed: {\n                enumerable: true,\n                get: function() {\n                    return Boolean(\"USE_DASH\" in this.defines);\n                },\n                set (value) {\n                    if (Boolean(value) !== Boolean(\"USE_DASH\" in this.defines)) {\n                        this.needsUpdate = true;\n                    }\n                    if (value === true) {\n                        this.defines.USE_DASH = \"\";\n                    } else {\n                        delete this.defines.USE_DASH;\n                    }\n                }\n            },\n            dashScale: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.dashScale.value;\n                },\n                set: function(value) {\n                    this.uniforms.dashScale.value = value;\n                }\n            },\n            dashSize: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.dashSize.value;\n                },\n                set: function(value) {\n                    this.uniforms.dashSize.value = value;\n                }\n            },\n            dashOffset: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.dashOffset.value;\n                },\n                set: function(value) {\n                    this.uniforms.dashOffset.value = value;\n                }\n            },\n            gapSize: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.gapSize.value;\n                },\n                set: function(value) {\n                    this.uniforms.gapSize.value = value;\n                }\n            },\n            opacity: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.opacity.value;\n                },\n                set: function(value) {\n                    this.uniforms.opacity.value = value;\n                }\n            },\n            resolution: {\n                enumerable: true,\n                get: function() {\n                    return this.uniforms.resolution.value;\n                },\n                set: function(value) {\n                    this.uniforms.resolution.value.copy(value);\n                }\n            },\n            alphaToCoverage: {\n                enumerable: true,\n                get: function() {\n                    return Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines);\n                },\n                set: function(value) {\n                    if (Boolean(value) !== Boolean(\"USE_ALPHA_TO_COVERAGE\" in this.defines)) {\n                        this.needsUpdate = true;\n                    }\n                    if (value === true) {\n                        this.defines.USE_ALPHA_TO_COVERAGE = \"\";\n                        this.extensions.derivatives = true;\n                    } else {\n                        delete this.defines.USE_ALPHA_TO_COVERAGE;\n                        this.extensions.derivatives = false;\n                    }\n                }\n            }\n        });\n        this.setValues(parameters);\n    }\n}\n //# sourceMappingURL=LineMaterial.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js":
/*!**********************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineSegments2.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSegments2: () => (/* binding */ LineSegments2)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LineSegmentsGeometry.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\");\n/* harmony import */ var _LineMaterial_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LineMaterial.js */ \"(ssr)/./node_modules/three-stdlib/lines/LineMaterial.js\");\n/* harmony import */ var _polyfill_uv1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_polyfill/uv1.js */ \"(ssr)/./node_modules/three-stdlib/_polyfill/uv1.js\");\n\n\n\n\nconst _viewport = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _start = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _end = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _start4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _end4 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _ssOrigin = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nconst _ssOrigin3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _mvMatrix = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();\nconst _line = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Line3();\nconst _closestPoint = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _box = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst _sphere = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\nconst _clipToWorldVector = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector4();\nlet _ray, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n    _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n    _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n    _clipToWorldVector.x = _lineWidth / resolution.width;\n    _clipToWorldVector.y = _lineWidth / resolution.height;\n    _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n    _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n    return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n    const matrixWorld = lineSegments.matrixWorld;\n    const geometry = lineSegments.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);\n    for(let i = 0, l = segmentCount; i < l; i++){\n        _line.start.fromBufferAttribute(instanceStart, i);\n        _line.end.fromBufferAttribute(instanceEnd, i);\n        _line.applyMatrix4(matrixWorld);\n        const pointOnLine = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n        const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n        if (isInside) {\n            intersects.push({\n                point,\n                pointOnLine,\n                distance: _ray.origin.distanceTo(point),\n                object: lineSegments,\n                face: null,\n                faceIndex: i,\n                uv: null,\n                [_polyfill_uv1_js__WEBPACK_IMPORTED_MODULE_1__.UV1]: null\n            });\n        }\n    }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n    const projectionMatrix = camera.projectionMatrix;\n    const material = lineSegments.material;\n    const resolution = material.resolution;\n    const matrixWorld = lineSegments.matrixWorld;\n    const geometry = lineSegments.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);\n    const near = -camera.near;\n    _ray.at(1, _ssOrigin);\n    _ssOrigin.w = 1;\n    _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n    _ssOrigin.applyMatrix4(projectionMatrix);\n    _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n    _ssOrigin.x *= resolution.x / 2;\n    _ssOrigin.y *= resolution.y / 2;\n    _ssOrigin.z = 0;\n    _ssOrigin3.copy(_ssOrigin);\n    _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n    for(let i = 0, l = segmentCount; i < l; i++){\n        _start4.fromBufferAttribute(instanceStart, i);\n        _end4.fromBufferAttribute(instanceEnd, i);\n        _start4.w = 1;\n        _end4.w = 1;\n        _start4.applyMatrix4(_mvMatrix);\n        _end4.applyMatrix4(_mvMatrix);\n        const isBehindCameraNear = _start4.z > near && _end4.z > near;\n        if (isBehindCameraNear) {\n            continue;\n        }\n        if (_start4.z > near) {\n            const deltaDist = _start4.z - _end4.z;\n            const t = (_start4.z - near) / deltaDist;\n            _start4.lerp(_end4, t);\n        } else if (_end4.z > near) {\n            const deltaDist = _end4.z - _start4.z;\n            const t = (_end4.z - near) / deltaDist;\n            _end4.lerp(_start4, t);\n        }\n        _start4.applyMatrix4(projectionMatrix);\n        _end4.applyMatrix4(projectionMatrix);\n        _start4.multiplyScalar(1 / _start4.w);\n        _end4.multiplyScalar(1 / _end4.w);\n        _start4.x *= resolution.x / 2;\n        _start4.y *= resolution.y / 2;\n        _end4.x *= resolution.x / 2;\n        _end4.y *= resolution.y / 2;\n        _line.start.copy(_start4);\n        _line.start.z = 0;\n        _line.end.copy(_end4);\n        _line.end.z = 0;\n        const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n        _line.at(param, _closestPoint);\n        const zPos = three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.lerp(_start4.z, _end4.z, param);\n        const isInClipSpace = zPos >= -1 && zPos <= 1;\n        const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n        if (isInClipSpace && isInside) {\n            _line.start.fromBufferAttribute(instanceStart, i);\n            _line.end.fromBufferAttribute(instanceEnd, i);\n            _line.start.applyMatrix4(matrixWorld);\n            _line.end.applyMatrix4(matrixWorld);\n            const pointOnLine = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            const point = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n            _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n            intersects.push({\n                point,\n                pointOnLine,\n                distance: _ray.origin.distanceTo(point),\n                object: lineSegments,\n                face: null,\n                faceIndex: i,\n                uv: null,\n                [_polyfill_uv1_js__WEBPACK_IMPORTED_MODULE_1__.UV1]: null\n            });\n        }\n    }\n}\nclass LineSegments2 extends three__WEBPACK_IMPORTED_MODULE_0__.Mesh {\n    constructor(geometry = new _LineSegmentsGeometry_js__WEBPACK_IMPORTED_MODULE_2__.LineSegmentsGeometry(), material = new _LineMaterial_js__WEBPACK_IMPORTED_MODULE_3__.LineMaterial({\n        color: Math.random() * 16777215\n    })){\n        super(geometry, material);\n        this.isLineSegments2 = true;\n        this.type = \"LineSegments2\";\n    }\n    // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n    computeLineDistances() {\n        const geometry = this.geometry;\n        const instanceStart = geometry.attributes.instanceStart;\n        const instanceEnd = geometry.attributes.instanceEnd;\n        const lineDistances = new Float32Array(2 * instanceStart.count);\n        for(let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2){\n            _start.fromBufferAttribute(instanceStart, i);\n            _end.fromBufferAttribute(instanceEnd, i);\n            lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n            lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n        }\n        const instanceDistanceBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(lineDistances, 2, 1);\n        geometry.setAttribute(\"instanceDistanceStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n        geometry.setAttribute(\"instanceDistanceEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n        return this;\n    }\n    raycast(raycaster, intersects) {\n        const worldUnits = this.material.worldUnits;\n        const camera = raycaster.camera;\n        if (camera === null && !worldUnits) {\n            console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');\n        }\n        const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n        _ray = raycaster.ray;\n        const matrixWorld = this.matrixWorld;\n        const geometry = this.geometry;\n        const material = this.material;\n        _lineWidth = material.linewidth + threshold;\n        if (geometry.boundingSphere === null) {\n            geometry.computeBoundingSphere();\n        }\n        _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n        let sphereMargin;\n        if (worldUnits) {\n            sphereMargin = _lineWidth * 0.5;\n        } else {\n            const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n            sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n        }\n        _sphere.radius += sphereMargin;\n        if (_ray.intersectsSphere(_sphere) === false) {\n            return;\n        }\n        if (geometry.boundingBox === null) {\n            geometry.computeBoundingBox();\n        }\n        _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n        let boxMargin;\n        if (worldUnits) {\n            boxMargin = _lineWidth * 0.5;\n        } else {\n            const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n            boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n        }\n        _box.expandByScalar(boxMargin);\n        if (_ray.intersectsBox(_box) === false) {\n            return;\n        }\n        if (worldUnits) {\n            raycastWorldUnits(this, intersects);\n        } else {\n            raycastScreenSpace(this, camera, intersects);\n        }\n    }\n    onBeforeRender(renderer) {\n        const uniforms = this.material.uniforms;\n        if (uniforms && uniforms.resolution) {\n            renderer.getViewport(_viewport);\n            this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);\n        }\n    }\n}\n //# sourceMappingURL=LineSegments2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineSegments2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js":
/*!*****************************************************************!*\
  !*** ./node_modules/three-stdlib/lines/LineSegmentsGeometry.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineSegmentsGeometry: () => (/* binding */ LineSegmentsGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n\nconst _box = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\nconst _vector = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nclass LineSegmentsGeometry extends three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferGeometry {\n    constructor(){\n        super();\n        this.isLineSegmentsGeometry = true;\n        this.type = \"LineSegmentsGeometry\";\n        const positions = [\n            -1,\n            2,\n            0,\n            1,\n            2,\n            0,\n            -1,\n            1,\n            0,\n            1,\n            1,\n            0,\n            -1,\n            0,\n            0,\n            1,\n            0,\n            0,\n            -1,\n            -1,\n            0,\n            1,\n            -1,\n            0\n        ];\n        const uvs = [\n            -1,\n            2,\n            1,\n            2,\n            -1,\n            1,\n            1,\n            1,\n            -1,\n            -1,\n            1,\n            -1,\n            -1,\n            -2,\n            1,\n            -2\n        ];\n        const index = [\n            0,\n            2,\n            1,\n            2,\n            3,\n            1,\n            2,\n            4,\n            3,\n            4,\n            5,\n            3,\n            4,\n            6,\n            5,\n            6,\n            7,\n            5\n        ];\n        this.setIndex(index);\n        this.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(positions, 3));\n        this.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(uvs, 2));\n    }\n    applyMatrix4(matrix) {\n        const start = this.attributes.instanceStart;\n        const end = this.attributes.instanceEnd;\n        if (start !== void 0) {\n            start.applyMatrix4(matrix);\n            end.applyMatrix4(matrix);\n            start.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        return this;\n    }\n    setPositions(array) {\n        let lineSegments;\n        if (array instanceof Float32Array) {\n            lineSegments = array;\n        } else if (Array.isArray(array)) {\n            lineSegments = new Float32Array(array);\n        }\n        const instanceBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(lineSegments, 6, 1);\n        this.setAttribute(\"instanceStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceBuffer, 3, 0));\n        this.setAttribute(\"instanceEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceBuffer, 3, 3));\n        this.computeBoundingBox();\n        this.computeBoundingSphere();\n        return this;\n    }\n    setColors(array, itemSize = 3) {\n        let colors;\n        if (array instanceof Float32Array) {\n            colors = array;\n        } else if (Array.isArray(array)) {\n            colors = new Float32Array(array);\n        }\n        const instanceColorBuffer = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedInterleavedBuffer(colors, itemSize * 2, 1);\n        this.setAttribute(\"instanceColorStart\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceColorBuffer, itemSize, 0));\n        this.setAttribute(\"instanceColorEnd\", new three__WEBPACK_IMPORTED_MODULE_0__.InterleavedBufferAttribute(instanceColorBuffer, itemSize, itemSize));\n        return this;\n    }\n    fromWireframeGeometry(geometry) {\n        this.setPositions(geometry.attributes.position.array);\n        return this;\n    }\n    fromEdgesGeometry(geometry) {\n        this.setPositions(geometry.attributes.position.array);\n        return this;\n    }\n    fromMesh(mesh) {\n        this.fromWireframeGeometry(new three__WEBPACK_IMPORTED_MODULE_0__.WireframeGeometry(mesh.geometry));\n        return this;\n    }\n    fromLineSegments(lineSegments) {\n        const geometry = lineSegments.geometry;\n        this.setPositions(geometry.attributes.position.array);\n        return this;\n    }\n    computeBoundingBox() {\n        if (this.boundingBox === null) {\n            this.boundingBox = new three__WEBPACK_IMPORTED_MODULE_0__.Box3();\n        }\n        const start = this.attributes.instanceStart;\n        const end = this.attributes.instanceEnd;\n        if (start !== void 0 && end !== void 0) {\n            this.boundingBox.setFromBufferAttribute(start);\n            _box.setFromBufferAttribute(end);\n            this.boundingBox.union(_box);\n        }\n    }\n    computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new three__WEBPACK_IMPORTED_MODULE_0__.Sphere();\n        }\n        if (this.boundingBox === null) {\n            this.computeBoundingBox();\n        }\n        const start = this.attributes.instanceStart;\n        const end = this.attributes.instanceEnd;\n        if (start !== void 0 && end !== void 0) {\n            const center = this.boundingSphere.center;\n            this.boundingBox.getCenter(center);\n            let maxRadiusSq = 0;\n            for(let i = 0, il = start.count; i < il; i++){\n                _vector.fromBufferAttribute(start, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n                _vector.fromBufferAttribute(end, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n            }\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n            if (isNaN(this.boundingSphere.radius)) {\n                console.error(\"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\", this);\n            }\n        }\n    }\n    toJSON() {}\n    applyMatrix(matrix) {\n        console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n        return this.applyMatrix4(matrix);\n    }\n}\n //# sourceMappingURL=LineSegmentsGeometry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-stdlib/lines/LineSegmentsGeometry.js\n");

/***/ })

};
;